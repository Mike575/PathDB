<?php

/**
 * @file
 * moderated_content_bulk_publish module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function moderated_content_bulk_publish_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name === 'help.page.moderated_content_bulk_publish') {
    $readme_file = file_exists(__DIR__ . '/README.md') ? __DIR__ . '/README.md' : __DIR__ . '/README.txt';
    if (!file_exists($readme_file)) {
      return NULL;
    }
    $text = file_get_contents($readme_file);
    if ($text && !\Drupal::moduleHandler()->moduleExists('markdown')) {
      return '<pre>' . $text . '</pre>';
    }
    else {
      // Use the Markdown filter to render the README.
      $filter_manager = \Drupal::service('plugin.manager.filter');
      $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
      $config = ['settings' => $settings];
      $filter = $filter_manager->createInstance('markdown', $config);
      return $filter->process($text, 'en');
    }
  }
  return NULL;
}

/**
 * Implements hook_page_attachments().
 *
 * Adds the moderated-content-bulk-publish libraries to each page.
 */
function moderated_content_bulk_publish_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'moderated_content_bulk_publish/moderated-content-bulk-publish';
}

/**
 * Implements hook_theme()
 */
function moderated_content_bulk_publish_theme($existing, $type, $theme, $path) {
  return [
    'moderated_content_bulk_publish' => [
      'variables' => ['test_var' => NULL],
    ],
  ];
}

// Thanks to https://drupal.stackexchange.com/questions/270396/add-language-switcher-on-admin-toolbar
/**
 * Implements hook_toolbar() (Display a language switcher for available languages on admin toolbar if site has more than one language).
 */
function moderated_content_bulk_publish_toolbar() {

  // Get languages
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $languages = \Drupal::languageManager()->getLanguages();

  // Check if Language module is enabled and there is more than one language
  $moduleHandler = \Drupal::service('module_handler');
  if (count($languages) > 1 && $moduleHandler->moduleExists('language')) {

    // Get current route.
    $route = \Drupal::service('path.matcher')
      ->isFrontPage() ? '<front>' : '<current>';

    // Get links.
    $links = [];
    foreach ($languages as $language) {
      $url = new Url($route, [], ['language' => $language]);
      $links[] = [
        '#markup' => Link::fromTextAndUrl($language->getName(), $url)
          ->toString(),
      ];
    }

    // Set cache.
    $items['admin_toolbar_langswitch'] = [
      '#cache' => [
        'contexts' => [
          'languages:language_interface',
          'url',
        ],
      ],
    ];

    // Build toolbar item and tray.
    $items['admin_toolbar_langswitch'] += [
      '#type'   => 'toolbar_item',
      '#weight' => 999,
      'tab'     => [
        '#type'       => 'link',
        '#url'        => Url::fromRoute('entity.configurable_language.collection'),
        '#title'      => t('Language') . ': ' . strtoupper($current_language),
        '#attributes' => [
          'class' => ['toolbar-item-admin-toolbar-langswitch'],
          'title' => t('Admin Toolbar Langswitch'),
        ],
      ],
      'tray'    => [
        '#heading' => t('Admin Toolbar Langswitch'),
        'content'  => [
          '#theme'      => 'item_list',
          '#items'      => $links,
          '#attributes' => [
            'class' => ['toolbar-menu'],
          ],
        ],
      ],
    ];

    return $items;

  }

}


function moderated_content_bulk_publish_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  return; // Disable, maybe use a shutdown function instead if you want to do a node save, better logic that way.
  // https://api.drupal.org/api/drupal/core%21includes%21bootstrap.inc/function/drupal_register_shutdown_function/8.2.x
  // See above api for how a shutdown function works.

  $bingo = FALSE; // Found the form id we're looking for?
  $ENABLED_SYNCHRONIZATION = FALSE; // Flag used for targetting this functionality.

  $current_path = \Drupal::service('path.current')->getPath();

  if (stripos($current_path, 'edit') > 1 || stripos($current_path, 'add') > 1 ) {
    $ENABLED_SYNCHRONIZATION = TRUE; // Enable sync.
  }
  if (stripos($current_path, 'revision') > 1 ||  stripos($form_id, 'revision') > 1) {
    $ENABLED_SYNCHRONIZATION = FALSE; // Disable sync.
  }
  if (stripos($form_id, 'edit_form') > 5 && stripos($form_id, 'node') === 0) {
    $bingo = TRUE;
  } else if (stripos($form_id, 'node') === 0) {
    $bingo = TRUE;
  }

  if ($ENABLED_SYNCHRONIZATION && $bingo) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        // Add a custom submit handler to set the moderation state to all translations.
        $form['actions'][$action]['#submit'][] = 'apply_moderation_state_to_both_languages_callback';
      }
    }
  }

}


/**
 * Submit callback to syncronize/harmonize moderation states.
 */
function apply_moderation_state_to_both_languages_callback(array $form, \Drupal\Core\Form\FormStateInterface &$form_state) {
  return; // Disable, maybe use a shutdown function instead if you want to do a node save, better logic that way.
  // https://api.drupal.org/api/drupal/core%21includes%21bootstrap.inc/function/drupal_register_shutdown_function/8.2.x
  // See above api for how a shutdown function works.

  //THIS FUNCTIONALITY IS ENABLED, SEE $ENABLED_SYNCHRONIZATION = TRUE in hook_form_alter above.
  $langId = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $otherLang = 'fr';
  if ($langId == 'fr') {
    $otherLang = 'en';
  }
  // Getting the entity.
  $moderation_state = $form_state->getValue('moderation_state');
  $moderation_state_en = '';
  $moderation_state_fr = '';
  if (!empty($moderation_state)) {
    $moderation_state = reset($moderation_state);
    if (isset($moderation_state['value'])) {
      $moderation_state = $moderation_state['value'];
      if ($moderation_state == 'draft' || $moderation_state == 'archived' || $moderation_state == 'published') {
        $entity_manager = \Drupal::entityTypeManager();
        $entity = $form_state->getFormObject()->getEntity();
        // Changing the moderation state.

        if ($entity->hasTranslation($otherLang)) {
          if ($entity->hasTranslation('fr')) {
            $moderation_state_fr = $entity->getTranslation('fr')->get('moderation_state')->getString();
            if ($otherLang == 'fr') {
              if ($moderation_state_fr == 'published' && $moderation_state == 'draft') {
                // Using draft in the way we have it configured this way doesn't make sense, each translation should be drafted individually.
                // To unpublish all revisions must use either the /admin/content plugin or set to 'archived' and then optionally 'draft'.
                return;
              } else if ($moderation_state_fr == 'draft' && $moderation_state == 'draft') {
                return;
              } else if ($moderation_state_fr == 'archived' && $moderation_state == 'archived') {
                return;
              } else if ($moderation_state_fr == 'published' && $moderation_state == 'published') {
                return;
              }
            }
          }
          if ($entity->hasTranslation('en')) {
            $moderation_state_en = $entity->getTranslation('en')->get('moderation_state')->getString();
            if ($otherLang == 'en') {
              if ($moderation_state_en == 'published' && $moderation_state == 'draft') {
                // Using draft in the way we have it configured this way doesn't make sense, each translation should be drafted individually.
                // To unpublish all revisions must use either the /admin/content plugin or set to 'archived' and then optionally 'draft'.
                return;
              } else if ($moderation_state_en == 'draft' && $moderation_state == 'draft') {
                return;
              } else if ($moderation_state_en == 'archived' && $moderation_state == 'archived') {
                return;
              } else if ($moderation_state_en == 'published' && $moderation_state == 'published') {
                return;
              }
            }
          }
          $entity = $entity->getTranslation($otherLang);
          if ($otherLang == 'fr') {
            $msg = 'Synchronize moderation_state for ' . $otherLang . ' from ' . $moderation_state_fr . ' to ' . $moderation_state;
          }
          if ($otherLang == 'en') {
            $msg = 'Synchronize moderation_state for ' . $otherLang . ' from ' . $moderation_state_en . ' to ' . $moderation_state;
          }
          //\Drupal::logger('MODERATED_CONTENT_BULK_PUBLISH')->notice(utf8_encode($msg));
          $current_uid = \Drupal::currentUser()->id();
          if ($otherLang == 'fr') {
            $entity->getTranslation($otherLang)->setNewRevision(TRUE);
            $entity->getTranslation($otherLang)->set('moderation_state', $moderation_state);
            if ($entity instanceof Drupal\Core\Entity\RevisionLogInterface) {
              $entity->getTranslation($otherLang)->setRevisionCreationTime(\Drupal::time()->getRequestTime());
              $entity->getTranslation($otherLang)->setRevisionLogMessage($msg);
              $entity->getTranslation($otherLang)->setRevisionUserId($current_uid);
            }
          }
          if ($otherLang == 'en') {
            $moderation_state_orig = $entity->get('moderation_state')->getString();
            $entity->getTranslation($otherLang)->setNewRevision(TRUE);
            $entity->getTranslation($otherLang)->set('moderation_state', $moderation_state);
            if ($entity instanceof Drupal\Core\Entity\RevisionLogInterface) {
              $entity->getTranslation($otherLang)->setRevisionCreationTime(\Drupal::time()->getRequestTime());
              $entity->getTranslation($otherLang)->setRevisionLogMessage($msg);
              $entity->getTranslation($otherLang)->setRevisionUserId($current_uid);
            }
            $entity->setNewRevision(TRUE);
            $entity->set('moderation_state', $moderation_state);
            $msg = 'Synchronize moderation_state for ' . $otherLang . ' from ' . $moderation_state_orig . ' to ' . $moderation_state;
            if ($entity instanceof Drupal\Core\Entity\RevisionLogInterface) {
              $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
              $entity->setRevisionLogMessage($msg);
              $entity->setRevisionUserId($current_uid);
            }
          }
          // Saving the entity.
          $entity->save();
        }
      }
    }
  }
}

